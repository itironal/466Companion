Traceback (most recent call last):
  File "/opt/miniconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/miniconda3/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#K-means

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Parameters
k = 6  # You can change this to any number of segments you want

# Load the image
image_bgr = cv2.imread('tulip2.jpeg')
image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)

# Reshape the image to a 2D array of pixels and 3 color values (RGB)
pixel_values = image_rgb.reshape((-1, 3))
pixel_values = np.float32(pixel_values)

# Define criteria for K-means (type, max_iter, epsilon)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)

# Apply K-means clustering
_, labels, centers = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

# Convert centers to uint8 (color values)
centers = np.uint8(centers)

# Map each pixel to the color of its corresponding center
segmented_image = centers[labels.flatten()]
segmented_image = segmented_image.reshape(image_rgb.shape)

# Save the original and segmented images
cv2.imwrite(f'segmented_image_k{k}.jpg', cv2.cvtColor(segmented_image, cv2.COLOR_RGB2BGR))  # Save as BGR with k in filename

# Plot the original and segmented images side by side
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(image_rgb)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title(f'Segmented Image (k={k})')
plt.imshow(segmented_image)
plt.axis('off')

plt.tight_layout()
plt.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31merror[0m                                     Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 12>[0;34m()[0m
[1;32m     10[0m [38;5;66;03m# Load the image[39;00m
[1;32m     11[0m image_bgr [38;5;241m=[39m cv2[38;5;241m.[39mimread([38;5;124m'[39m[38;5;124mtulip2.jpeg[39m[38;5;124m'[39m)
[0;32m---> 12[0m image_rgb [38;5;241m=[39m [43mcv2[49m[38;5;241;43m.[39;49m[43mcvtColor[49m[43m([49m[43mimage_bgr[49m[43m,[49m[43m [49m[43mcv2[49m[38;5;241;43m.[39;49m[43mCOLOR_BGR2RGB[49m[43m)[49m
[1;32m     14[0m [38;5;66;03m# Reshape the image to a 2D array of pixels and 3 color values (RGB)[39;00m
[1;32m     15[0m pixel_values [38;5;241m=[39m image_rgb[38;5;241m.[39mreshape(([38;5;241m-[39m[38;5;241m1[39m, [38;5;241m3[39m))

[0;31merror[0m: OpenCV(4.9.0) /Users/runner/work/opencv-python/opencv-python/opencv/modules/imgproc/src/color.cpp:196: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'

error: OpenCV(4.9.0) /Users/runner/work/opencv-python/opencv-python/opencv/modules/imgproc/src/color.cpp:196: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'


